// menu driven program for circular singlly link list//

#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node* next;
};
struct node* head=NULL,*ptr;

void create()
{
    struct node* temp;
    temp=(struct node*)malloc(sizeof(struct node));
    printf("enter node data:");
    scanf("%d",&temp->data);
    temp->next=NULL;
    if(head==NULL)
    {
        head=temp;
        ptr=temp;
    }
    else
    {
        ptr->next=temp;
        ptr=temp;
        ptr->next=head;
    }
}
void insert_begin(int value)
{
    struct node* temp;
    temp=(struct node*)malloc(sizeof(struct node));
    temp->data=value;
    temp->next=NULL;
    if(head==NULL)
    {
        head=temp;
        
    }
    else
    {
        ptr=head;
        while(ptr->next!=head)
        {
            ptr=ptr->next;
        }
        temp->next=head;
        ptr->next=temp;
        head=temp;
    }
}
void insert_end(int value)
{
    struct node* temp;
    temp=(struct node*)malloc(sizeof(struct node));
    temp->data=value;
    if(head==NULL)
    {
        head=temp;

    }
    else
    {
        ptr=head;
        while(ptr->next!=head)
        {
            ptr=ptr->next;
        }
        temp->next=head;
        ptr->next=temp;
    }
}
void insert_after_specified_ele(int value,int ele)
{
    struct node* temp;
    temp=(struct node*)malloc(sizeof(struct node));
    temp->data=value;
    if(head==NULL)
    {
        head=temp;
    }
    else
    {
        ptr=head;
        while(ptr->data!=ele)
        {
            ptr=ptr->next;
        }
        temp->next=ptr->next;
        ptr->next=temp;
    }
}
void delete_begin()
{
    if(head==NULL)
    {
       printf("list is empty:");
       
      
    }
    else
    {
        struct node *temp=head;
        temp=head;
        head=head->next;
        ptr->next=head;
        temp->next=NULL;
    }
}
void delete_end()
{
   if(head==NULL)
   {
       printf("list is empty:");
   }
   else
   {
       struct node* temp,*prev;
       temp=head,prev=NULL;
       while(temp->next!=head)
       {
           prev=temp;
           temp=temp->next;
       }
       prev->next=head;
       free(temp);
       temp=NULL;
       
   }
}
void delete_middle(int ele)
{
    struct node *ptr=head,*p;
    if(head==NULL)
    {
        printf("list is empty:");
    }
    else
    {
        while(ptr->data!=ele)
        {
            p=ptr;
            ptr=ptr->next;
        }
        p->next=ptr->next;
        free(ptr);
        ptr=NULL;
    }
}
void display()
{
    ptr=head;
    if(head==NULL)
    {
        printf("list is empty:");
    }
    else
    {
        while(ptr->next!=head)
        {
            printf("->%d",ptr->data);
            ptr=ptr->next;
        }
        printf("->%d\n",ptr->data);
    }
}
    
void main()
{
    int value,ele,ch;
    printf("1.create\n2.display\n3.insert_begin\n4.insert_end\n5.insert_after_specified ele\n6.delete_begin\n7.delete_end\n8.delete_middle\n9.Exit\n");
    
    while(1)
    {
        printf("enter your choice:");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1:
            {
                create();
                break;
            }
            case 2:
            {
                display();
                break;
            }
            case 3:
            {
                printf("enter the value:");
                scanf("%d",&value);
                insert_begin(value);
                break;
            }
            case 4:
            {
               printf("enter the value:");
               scanf("%d",&value);
               insert_end(value);
               break; 
            }
            case 5:
            {
              printf("enter the value:");
              scanf("%d",&value);
              printf("enter the position:");
              scanf("%d",&ele);
              insert_after_specified_ele(value,ele);
              break;
            }
            case 6:
            {
                delete_begin();
                break;
            }
             case 7:
            {
               
             delete_end();
             break;
            }
             case 8:
            {
                printf("enter the element you want to delete:");
                scanf("%d",&ele);
                delete_middle(ele);
                break;
            }
            case 9:
            exit(0);
        }
    }
}









